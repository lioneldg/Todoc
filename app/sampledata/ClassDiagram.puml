@startuml
'https://plantuml.com/class-diagram

package app.java.com.cleanup.todoc.database {
    AppDatabase --> TaskDao
    AppDatabase --> ProjectDao
}

package app.java.com.cleanup.todoc.model {
    Project <-up- ProjectDao
    Task <-up- TaskDao
    Task -* TaskAZComparator
    Task --* TaskZAComparator
    Task --* TaskRecentComparator
    Task --* TaskOldComparator
    Task -up-> Project
}

package app.java.com.cleanup.todoc.repository {
    ProjectDataRepository --> ProjectDao
    TaskDataRepository --> TaskDao
}

package app.java.com.cleanup.todoc.ui {
    TasksAdapter --> Task
    TasksAdapter -right-* DeleteTaskListener
    TasksAdapter ..> TaskViewHolder
    TasksAdapter --* TaskViewHolder
    TaskViewHolder -up-> DeleteTaskListener
    MainActivity ..> TasksAdapter
    MainActivity -right-* SortMethod
    MainActivity .left.> Task
    MainActivity --> Project
}

package "app.java.com.cleanup.todoc.viewmodel"{
    TaskViewModel -> TaskDataRepository
    TaskViewModel -> ProjectDataRepository
    ViewModelFactory ..> TaskViewModel
    ViewModelFactory -> TaskDataRepository
    ViewModelFactory -> ProjectDataRepository
    Injection --> AppDatabase
    Injection .> TaskDataRepository
    Injection .> ProjectDataRepository
    Injection -> TaskDataRepository
    Injection -> ProjectDataRepository
    Injection ..> ViewModelFactory
    TaskViewModel <.. MainActivity
    ViewModelFactory <-- MainActivity
    Injection <-- MainActivity
}

class MainActivity {
    - allProjects : List<Project>
    - tasks : ArrayList<Task>
    - adapter : TasksAdapter
    - sortMethod : SortMethod
    + dialog : AlertDialog
    - dialogEditText : EditText
    - dialogSpinner : Spinner
    - listTasks : RecyclerView
    - lblNoTasks : TextView
    - taskViewModel : TaskViewModel
    + onCreate( savedInstanceState : Bundle ) : void
    + onCreateOptionsMenu( menu : Menu ) : boolean
    + onOptionsItemSelected( item : MenuItem ) : boolean
    + onDeleteTask( task : Task ) : void
    - onPositiveButtonClick( dialogInterface : DialogInterface ) : void
    - configureRVTasks() : void
    - showAddTaskDialog() : void
    - addTask( task : Task ) : void
    - updateTasks() : void
    - getAddTaskDialog() : AlertDialog
    - populateDialogSpinner() : void
    - configureViewModel() : void
    - getAllProjects() : void
    - getAllTasks() : void
    - updateProjectsList(projects : List<Project>) : void
    - updateTasksList(tasks : List<Task>) : void
}

enum SortMethod {
            ALPHABETICAL,
            ALPHABETICAL_INVERTED,
            RECENT_FIRST,
            OLD_FIRST,
            NONE
        }

class Project {
    - id : long
    - name : String
    - color : int
    - Project( id : long, name : String, color : int)
    + {static} getAllProjects() : Project[]
    + {static} getProjectById( id : long ) : Project
    + getId() : long
    + getName() : String
    + getColor() : int
    + toString() : String
}

class Task {
    - id : long
    - projectId : long
    - name : String
    - creationTimesStamp : long
    + Task( projectId : long, name : String, creationTimesStamp : long )
    + getId() : long
    + setId( id : long ) : void
    + getProjectId() : long
    + setProjectId( projectId : long ) : void
    + getProject() : Project
    + getName() : String
    + setName( name : String ) : void
    + setCreationTimestamp( creationTimestamp : long ) : void
    + getCreationTimestamp() : long
}

class TaskAZComparator <implements Comparator<Task>>{
    + {static} compare( left : Task, right : Task ) : int
}

class TaskZAComparator <implements Comparator<Task>>{
    + {static} compare( left : Task, right : Task ) : int
}

class TaskRecentComparator <implements Comparator<Task>>{
    + {static} compare( left : Task, right : Task ) : int
}

class TaskOldComparator <implements Comparator<Task>>{
    + {static} compare( left : Task, right : Task ) : int
}

class TasksAdapter <extends RecyclerView.Adapter<TasksAdapter.TaskViewHolder>>{
   - tasks : List<Task>
   - deleteTaskListener : DeleteTaskListener
   TasksAdapter( tasks : List<Task>, deleteTaskListener : DeleteTaskListener )
   + updateTasks( tasks : List<Task> ) : void
   + onCreateViewHolder( viewGroup : ViewGroup, viewType : int ) : TaskViewHolder
   + onBindViewHolder( taskViewHolder : TaskViewHolder, position : int ) : void
   + getItemCount() : int

}

interface DeleteTaskListener {
   + onDeleteTask(task : Task) : void
}

class TaskViewHolder <extends RecyclerView.ViewHolder> {
    - imgProject : AppCompatImageView
    - lblTaskName : TextView
    - lblProjectName : TextView
    - imgDelete : AppCompatImageView
    - deleteTaskListener : DeleteTaskListener
    - TaskViewHolder( itemView : View, deleteTaskListener : DeleteTaskListener )
    - bind( task : Task) : void
}

class TaskDataRepository {
    - taskDao : TaskDao
    + TaskDataRepository(taskDao : TaskDao)
    + createTask( task : Task ) : void
    + getAllTasks() : LiveData<List<Task>>
    + deleteTask( task : Task ) : void
}

class ProjectDataRepository {
    - projectDao : ProjectDao
    + ProjectDataRepository( projectDao : ProjectDao )
    + getAllProjects() : LiveData<List<Project>>
}

interface TaskDao {
    + addTask( task : Task ) : long
    + getAllTasks() : LiveData<List<Task>>
    + deleteTask( id : long ) : void
}

interface ProjectDao {
    + getAllProjects() : LiveData<List<Project>>
}

class ViewModelFactory <implements ViewModelProvider.Factory> {
    - taskDataRepository : TaskDataRepository
    - projectDataRepository : ProjectDataRepository
    - executor : Executor
    + ViewModelFactory( taskDataRepository : TaskDataRepository, projectDataRepository : ProjectDataRepository, executor : Executor)
    + create( modelClass : Class<T> ) : <T extends ViewModel> T
}

abstract class AppDatabase <extends RoomDatabase> {
    - {static volatile} INSTANCE : AppDatabase
    + abstract taskDao() : TaskDao
    + abstract projectDao() : ProjectDao
    + {static} getInstance(Context context) : AppDatabase
    - {static} prepopulateDatabase() : Callback
}

class TaskViewModel <extends ViewModel> {
    - taskDataSource : TaskDataRepository
    - projectDataSource : ProjectDataRepository
    - executor : Executor
    - allProjects : LiveData<List<Project>>
    - allTasks : LiveData<List<Task>>
    + TaskViewModel( taskDataSource : TaskDataRepository, projectDataSource : ProjectDataRepository, executor : Executor)
    + init() : void
    + getAllProjects() : LiveData<List<Project>>
    + getAllTasks() : LiveData<List<Task>>
    + createTask( task : Task ) : void
    + deleteTask( task : Task) : void
}

class Injection {
    + {static} provideTaskDataSource( context : Context ) : TaskDataRepository
    + {static} provideProjectDataSource( context : Context ) : ProjectDataRepository
    + {static} provideExecutor() : Executor
    + {static} provideViewModelFactory( context : Context ) : ViewModelFactory
}

@enduml